# QP solver parameters
qp_solver: 'PARTIAL_CONDENSING_HPIPM' #'FULL_CONDENSING_HPIPM' #'FULL_CONDENSING_QPOASES' #'PARTIAL_CONDENSING_HPIPM'
qp_tol: 0.001
qp_solver_iter_max: 100
qp_solver_warm_start: 0
hpipm_mode: 'SPEED' #'BALANCE', 'ROBUST', 'SPEED'
qp_solver_ric_alg: 0 # 0 classical Riccati, 1 square-root Riccati

# params for hessian
hessian_approx: 'EXACT' #'GAUSS_NEWTON' #'EXACT' #
regularize_method: 'PROJECT' #‘PROJECT’, ‘MIRROR’, ‘CONVEXIFY’
reg_epsilon: 0.0001
levenberg_marquardt: 0.001 # factor for levenberg-marquardt regularization for hessian

# MPC integrator settings
integrator_type: 'ERK' #'ERK' #'IRK' #'GNSF'
sim_method_newton_iter: 3 # default: 3, only interesting for implicit integration
sim_method_num_steps: 5 # default: 1, integer > 0

# globalization (alpha params only for merit_backtracking)
globalization: 'FIXED_STEP' # MERIT_BACKTRACKING  FIXED_STEP
alpha_min: 0.000001 # for merit_backtracking
alpha_reduction: 0.7 # for merit_backtracking

# nlp solver settings
tol: 0.01 # nlp solver tolerance
nlp_solver_step_length: 1.0 # default: 1.0
nlp_solver_type: 'SQP' # 'SQP_RTI'(default) 'SQP'
nlp_solver_max_iter: 5 # default: 100
cost_discretization: 'EULER' # 'EULER' 'INTEGRATOR'(only for IRK)

# Sufficient descent line search
line_search_use_sufficient_descent: 1 # Determines if sufficient descent (Armijo) condition is used in line search
eps_sufficient_descent: 0.0001 # Threshold for sufficient descent condition

# Paths from mpc/solvers to respective folders
acados_path: '/home/jonas/AMZ/acados'
codegen_export_dir: 'codegenerated_solvers/acados_codegen/c_generated_solver_mpc'
ocp_solver_json_path: 'codegenerated_solvers/acados_codegen'
